"""
Euler Problem #2:


Each new term in the Fibonacci sequence is
generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence
whose values do not exceed four million,
find the sum of the even-valued terms.

"""


def even_fibonacci_numbers():
    """
    looks for  all even fibonacci numbers below 4M
     then sums them up, returning the total
    :return: int
    """
    a = 1
    b = 0
    fib_sec = []
    while b <= int(4e6):
        b += a
        a += b
        fib_sec.append(b)
        fib_sec.append(a)
    else:
        return sum(x for x in fib_sec if x % 2 == 0)


if __name__ == '__main__':
    result = even_fibonacci_numbers()
    print(result)
